
1. 动态规划
      重叠子问题
2. 分析思路
    2.1 分析的时候 从大大小
    2.2 编程的时候 从小到达

    注意查找问题出口



其实递归与动态规划有紧密的关系，且一般递归都可以转化为动态规划。这个问题从一般的递归构成就能够解释清楚，
首先，问题可以分解，拆成很多重叠子问题才可以求解，而动态规划也是这一思路，说白了动态规划其实就是记忆化了的
递归程序。动态规划把很多递归问题的解存储下来，这样就省去了求许多子问题的解，从而达到了快速求解的目的。
       递归其实就是自上往下求解，常见的递归形式就是
dfs(int n){
  if(n == ?)
   return
  dfs(n-1)
}
从顶部一直向下迭代，这点与动态规划相反，动态规划的思路常常是从底向上其常见的形式为
dp[n][n];
dp[0][0] = ?;
dp[1][0] = ?
for(int i = 1; i < n; i++){
   for(int j = i; j < n; j++){
  dp[i][j] = max(dp[i - 1][j], dp[i][j-1]) + ?
}
}
这两种形式是相反的，但是解决问题的形式是一样的，都是不
————————————————
版权声明：本文为CSDN博主「mejustdoit」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/dst111188/article/details/78554698

